/*
 * Copyright (c) 2002-2012 Balabit
 * Copyright (c) 1998-2012 BalÃ¡zs Scheidler
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published
 * by the Free Software Foundation, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * As an additional exemption you are allowed to compile & link against the
 * OpenSSL libraries as published by the OpenSSL project. See the file
 * COPYING for details.
 *
 */

%code top {
#include "afsocket-parser.h"

}


%code {

#include "afsocket.h"
#include "cfg-parser.h"
#include "afsocket-grammar.h"
#ifndef G_OS_WIN32
#include "afunix.h"
#include "service-management.h"
#include "../systemd-journal/journal-reader.h"
#include "../systemd-journal/systemd-journal.h"
#endif
#include "afinet.h"
#include "messages.h"
#include "syslog-names.h"
#include "plugin.h"

#ifndef _WIN32
#if __linux__
void
migrate_dev_log_to_systemd_journal(LogDriver *sd, LogDriver *sd_journal)
{
  JournalReaderOptions *journal_reader_options = systemd_journal_get_reader_options(sd_journal);
  journal_reader_options->super = last_reader_options->super;
  journal_reader_options->fetch_limit = last_reader_options->fetch_limit;
  journal_reader_options->default_pri = last_reader_options->parse_options.default_pri;
  journal_reader_options->recv_time_zone = g_strdup(last_reader_options->parse_options.recv_time_zone);
  log_pipe_unref((LogPipe *)sd);
  last_driver = sd_journal;
}

void
fallback_journald_if_required(LogDriver *sd)
{
  if (((strcmp(((AFUnixSourceDriver *)sd)->filename, "/dev/log") == 0) ||
      (strcmp(((AFUnixSourceDriver *)sd)->filename, "/run/systemd/system/journal") == 0)) &&
      (service_management_get_type() == SMT_SYSTEMD))
    {
      msg_warning("Using /dev/log Unix dgram socket with systemd is not possible. Changing to systemd-journal source", NULL);
      plugin_load_module("sdjournal", configuration, NULL);
      migrate_dev_log_to_systemd_journal(sd, systemd_journal_sd_new());
    }
}
#else
void
fallback_journald_if_required(LogDriver *sd)
{
}
#endif
#endif

#include "tlscontext.h"


static SocketOptions *last_sock_options;
static gint last_addr_family = AF_INET;

TLSContext *last_tls_context;

#if ! ENABLE_IPV6
#undef AF_INET6
#define AF_INET6 0; g_assert_not_reached()

#endif

}

%name-prefix "afsocket_"

/* this parameter is needed in order to instruct bison to use a complete
 * argument list for yylex/yyerror */

%lex-param {CfgLexer *lexer}
%parse-param {CfgLexer *lexer}
%parse-param {LogDriver **instance}
%parse-param {gpointer arg}

%token KW_UNIX_STREAM 20000
%token KW_UNIX_DGRAM
%token KW_TCP
%token KW_UDP
%token KW_TCP6
%token KW_UDP6
%token KW_TRANSPORT
%token KW_NETWORK
%token KW_TCP_NEWLINE
%token KW_TCP_FRAMED
%token KW_IP_PROTOCOL
%token KW_TLS_NEWLINE
%token KW_TLS_FRAMED

%token KW_IP_TTL
%token KW_SO_BROADCAST
%token KW_IP_TOS
%token KW_SO_SNDBUF
%token KW_SO_RCVBUF
%token KW_SO_KEEPALIVE
%token KW_SPOOF_SOURCE
%token KW_SPOOF_IF

%token KW_KEEP_ALIVE
%token KW_MAX_CONNECTIONS

%token KW_LOCALIP
%token KW_IP
%token KW_LOCALPORT
%token KW_DESTPORT
%token KW_FAILOVERS

/* SSL support */

%token KW_TLS
%token KW_PEER_VERIFY
%token KW_KEY_FILE
%token KW_CERT_FILE
%token KW_DHPARAM_FILE
%token KW_CA_DIR
%token KW_CA_DIR_LAYOUT
%token KW_CRL_DIR
%token KW_TRUSTED_KEYS
%token KW_TRUSTED_DN
%token KW_CIPHER_SUITE
%token KW_CURVE_LIST
%token KW_ALLOW_COMPRESS
%token KW_CERT_SUBJECT

/* INCLUDE_DECLS */

%type	<ptr> source_afsocket
%type	<ptr> source_afunix_dgram_params
%type	<ptr> source_afunix_stream_params
%type	<ptr> source_afinet_udp_params
%type	<ptr> source_afinet_tcp_params
%type <ptr> source_afsyslog
%type <ptr> source_afsyslog_params
%type <ptr> source_afnetwork
%type <ptr> source_afnetwork_params
%type <ptr> source_afsocket_stream_params
%type <cptr> transport

%type	<ptr> dest_afsocket
%type	<ptr> dest_afunix_dgram_params
%type	<ptr> dest_afunix_stream_params
%type	<ptr> dest_afinet_udp_params
%type	<ptr> dest_afinet_tcp_params
%type   <ptr> dest_afsyslog
%type   <ptr> dest_afsyslog_params
%type   <ptr> dest_afnetwork
%type   <ptr> dest_afnetwork_params

%%

start
        : LL_CONTEXT_SOURCE source_afsocket                   { YYACCEPT; }
        | LL_CONTEXT_SOURCE source_afsyslog                   { YYACCEPT; }
        | LL_CONTEXT_SOURCE source_afnetwork                  { YYACCEPT; }
        | LL_CONTEXT_DESTINATION dest_afsocket                { YYACCEPT; }
        | LL_CONTEXT_DESTINATION dest_afsyslog                { YYACCEPT; }
        | LL_CONTEXT_DESTINATION dest_afnetwork               { YYACCEPT; }
        ;

source_afsocket
  : KW_UNIX_DGRAM '(' source_afunix_dgram_params ')'                            { $$ = $3; }
	| KW_UNIX_STREAM '(' source_afunix_stream_params ')' 	                        { $$ = $3; }
	| KW_UDP { last_addr_family = AF_INET; } '(' source_afinet_udp_params ')'     { $$ = $4; }
	| KW_TCP { last_addr_family = AF_INET; } '(' source_afinet_tcp_params ')'     { $$ = $4; }
	| KW_UDP6 { last_addr_family = AF_INET6; } '(' source_afinet_udp_params ')'		{ $$ = $4; }
	| KW_TCP6 { last_addr_family = AF_INET6; } '(' source_afinet_tcp_params ')'		{ $$ = $4; }
  ;

transport
  : string
  | KW_TCP  { $$ = strdup(lexer->token_text->str); }
  | KW_UDP  { $$ = strdup(lexer->token_text->str); }
  | KW_TLS  { $$ = strdup(lexer->token_text->str); }
  ;

source_afunix_dgram_params
        : KW_IFDEF {
#ifndef G_OS_WIN32
}
	| string
	  {
	    last_driver = *instance = afunix_sd_new($1, AFSOCKET_LOCAL | AFSOCKET_DGRAM);
	    free($1);
            afsocket_sd_set_transport(last_driver,"dgram");
	    last_reader_options = &((AFSocketSourceDriver *) last_driver)->reader_options;
	    last_sock_options = ((AFUnixSourceDriver *) last_driver)->super.sock_options_ptr;
	  }
	  source_afunix_options
    {
      fallback_journald_if_required(last_driver);
      $$ = *instance = last_driver;
    }
        | KW_ENDIF {
#endif
}
	;

source_afunix_stream_params
        : KW_IFDEF {
#ifndef G_OS_WIN32
}
	| string
	  {
	    last_driver = *instance = afunix_sd_new($1, AFSOCKET_KEEP_ALIVE | AFSOCKET_LOCAL | AFSOCKET_STREAM);
	    free($1);
      afsocket_sd_set_transport(last_driver,"stream-newline");
	    last_reader_options = &((AFSocketSourceDriver *) last_driver)->reader_options;
	    last_sock_options = ((AFUnixSourceDriver *) last_driver)->super.sock_options_ptr;
	  }
	  source_afunix_options
    {
      fallback_journald_if_required(last_driver);
      $$ = *instance = last_driver;
    }
        | KW_ENDIF {
#endif
}
	;

/* options are common between dgram & stream */
source_afunix_options
	: source_afunix_option source_afunix_options
	|
	;

source_afunix_option
        : KW_IFDEF {
#ifndef G_OS_WIN32
}
	| KW_OWNER '(' string_or_number ')'	{ afunix_sd_set_uid(last_driver, $3); free($3); }
	| KW_OWNER '(' ')'	                { afunix_sd_set_uid(last_driver, "-2"); }
	| KW_GROUP '(' string_or_number ')'	{ afunix_sd_set_gid(last_driver, $3); free($3); }
	| KW_GROUP '(' ')'	                { afunix_sd_set_gid(last_driver, "-2"); }
	| KW_PERM '(' LL_NUMBER ')'		{ afunix_sd_set_perm(last_driver, $3); }
	| KW_PERM '(' ')'		        { afunix_sd_set_perm(last_driver, -2); }
	| KW_OPTIONAL '(' yesno ')'		{ last_driver->optional = $3; }
	| KW_CREATE_DIRS '(' yesno ')'		{ afunix_sd_set_create_dirs(last_driver, $3); }
	| source_afsocket_stream_params		{}
	| source_reader_option			{}
	| socket_option				{}
        | KW_ENDIF  {
#endif
}
	;

source_afinet_udp_params
  :
   {
	    last_driver = *instance = afinet_sd_new(last_addr_family,AFSOCKET_DGRAM);
      afsocket_sd_set_transport(last_driver,"dgram");
	    last_reader_options = &((AFSocketSourceDriver *) last_driver)->reader_options;
	    last_sock_options = ((AFInetSourceDriver *) last_driver)->super.sock_options_ptr;
	  }
	  source_afinet_udp_options		{ $$ = last_driver; }
	;

source_afinet_udp_options
	: source_afinet_udp_option source_afinet_udp_options
	|
	;

source_afinet_udp_option
	: source_afinet_option
    | KW_MULTI_LINE_PREFIX '(' string ')' { if (!afsocket_sd_set_multi_line_prefix(last_driver, $3))
                                              YYERROR;
                                          }
	;

source_afinet_option
	: KW_LOCALIP '(' string ')'		{ afinet_sd_set_localip(last_driver, $3); free($3); }
	| KW_IP '(' string ')'			{ afinet_sd_set_localip(last_driver, $3); free($3); }
	| KW_LOCALPORT '(' string_or_number ')'	{ afinet_sd_set_localport(last_driver, $3); free($3); }
	| KW_PORT '(' string_or_number ')'	{ afinet_sd_set_localport(last_driver, $3); free($3); }
	| source_reader_option
	| inet_socket_option
	;

source_afinet_tcp_params
	:
	  {
	    last_driver = *instance = afinet_sd_new(last_addr_family,AFSOCKET_STREAM );
      afsocket_sd_set_transport(last_driver,"stream-newline");
	    last_reader_options = &((AFSocketSourceDriver *) last_driver)->reader_options;
	    last_sock_options = ((AFInetSourceDriver *) last_driver)->super.sock_options_ptr;
	  }
	  source_afinet_tcp_options	{ $$ = last_driver; }
	;

source_afinet_tcp_options
	: source_afinet_tcp_option source_afinet_tcp_options
	|
	;

source_afinet_tcp_option
        : source_afinet_option
	| KW_TLS
	  {
	    last_tls_context = tls_context_new(TM_SERVER);
	  }
	  '(' tls_options ')'
	  {
	    afsocket_sd_set_tls_context(last_driver, last_tls_context);
          }
	| source_afsocket_stream_params		{}
	;

source_afsocket_stream_params
	: KW_KEEP_ALIVE '(' yesno ')'		{ afsocket_sd_set_keep_alive(last_driver, $3); }
	| KW_MAX_CONNECTIONS '(' LL_NUMBER ')'	{ afsocket_sd_set_max_connections(last_driver, $3); }
  | KW_MULTI_LINE_PREFIX '(' string ')' { if (!afsocket_sd_set_multi_line_prefix(last_driver, $3))
                                            YYERROR;
                                        }
  | KW_MULTI_LINE_GARBAGE '(' string ')' { if (!afsocket_sd_set_multi_line_garbage(last_driver, $3))
                                             YYERROR;
                                         }
	;

source_afsyslog
	: KW_SYSLOG { last_addr_family = AF_INET; } '(' source_afsyslog_params ')'		{ $$ = $4; }
	;

source_afsyslog_params
	:
	  {
      /* we use transport(tcp) transport by default */
	    last_driver = *instance = afinet_sd_new(last_addr_family,	AFSOCKET_STREAM | AFSOCKET_SYSLOG_DRIVER);
      afsocket_sd_set_transport(last_driver,"stream-framed");
	    last_reader_options = &((AFSocketSourceDriver *) last_driver)->reader_options;
	    last_sock_options = ((AFInetSourceDriver *) last_driver)->super.sock_options_ptr;
	  }
	  source_afsyslog_options	{ $$ = last_driver; }
	;

source_afsyslog_options
	: source_afsyslog_option source_afsyslog_options
	|
	;

source_afsyslog_option
        : source_afinet_option
        | KW_IP_PROTOCOL '(' LL_NUMBER ')'
            {
              if ($3 != 4 && $3 != 6)
                {
                  fprintf(stderr,"ip-protocol option can only be 4 or 6!\n");
                  YYERROR;
                }
              else if ($3 == 4)
                {
                  ((AFSocketSourceDriver *) last_driver)->address_family = AF_INET;
                }
              else
                {
                  ((AFSocketSourceDriver *) last_driver)->address_family = AF_INET6;
                }
            }
        | KW_TRANSPORT '(' transport
          {
            Plugin *p;
            gint context = LL_CONTEXT_SERVER_PROTO;
            gpointer value;

            p = plugin_find(configuration, context, $3);
            if (p)
              {
                if (p->parser)
                  {
                    value = plugin_parse_config(p, configuration, &@3, &((AFSocketSourceDriver *) last_driver)->proto_options);
                  }
                else
                  {
                    value = plugin_construct(p, configuration, context, $3);
                  }
                if (!value)
                  {
                    YYERROR;
                  }
                ((AFSocketSourceDriver *) last_driver)->proto_factory = (LogProtoFactory *)value;
              }
            afsocket_sd_set_transport(last_driver, $3);
          } ')'
      | KW_TLS
          {
            last_tls_context = tls_context_new(TM_SERVER);
          }
        '(' tls_options ')'
          {
              afsocket_sd_set_tls_context(last_driver, last_tls_context);
          }
	| source_afsocket_stream_params		{}
	;

source_afnetwork
  : KW_NETWORK { last_addr_family = AF_INET; } '(' source_afnetwork_params ')'    { $$ = $4; }
  ;

source_afnetwork_params
  :
    {
      /* we use transport(tcp) transport by default */
      last_driver = *instance = afinet_sd_new(last_addr_family,AFSOCKET_STREAM | AFSOCKET_NETWORK_DRIVER);
      afsocket_sd_set_transport(last_driver,"stream-newline");
      last_reader_options = &((AFSocketSourceDriver *) last_driver)->reader_options;
      last_sock_options = ((AFInetSourceDriver *) last_driver)->super.sock_options_ptr;
    }
    source_afsyslog_options { $$ = last_driver; }
  ;

dest_afsocket
        : KW_UNIX_DGRAM '(' dest_afunix_dgram_params ')'	{ $$ = $3; }
	| KW_UNIX_STREAM '(' dest_afunix_stream_params ')'	{ $$ = $3; }
        | KW_UDP { last_addr_family = AF_INET; } '(' dest_afinet_udp_params ')'			{ $$ = $4; }
	| KW_TCP { last_addr_family = AF_INET; } '(' dest_afinet_tcp_params ')'			{ $$ = $4; }
	| KW_UDP6 { last_addr_family = AF_INET6; } '(' dest_afinet_udp_params ')'			{ $$ = $4; }
	| KW_TCP6 { last_addr_family = AF_INET6; } '(' dest_afinet_tcp_params ')'			{ $$ = $4; }
	;

dest_afunix_dgram_params
        : KW_IFDEF {
#ifndef G_OS_WIN32
}
	| string
	  {
	    last_driver = *instance = afunix_dd_new($1,AFSOCKET_DGRAM);
	    free($1);
      afsocket_dd_set_transport(last_driver,"dgram");
	    last_writer_options = &((AFSocketDestDriver *) last_driver)->writer_options;
	    last_sock_options = ((AFUnixDestDriver *) last_driver)->super.sock_options_ptr;
	  }
	  dest_afunix_options			{ $$ = last_driver; }
        | KW_ENDIF {
#endif
}
	;

dest_afunix_stream_params
        : KW_IFDEF {
#ifndef G_OS_WIN32
}
	| string
	  {
	    last_driver = *instance = afunix_dd_new($1,AFSOCKET_STREAM);
	    free($1);
      afsocket_dd_set_transport(last_driver,"stream-newline");
	    last_writer_options = &((AFSocketDestDriver *) last_driver)->writer_options;
	    last_sock_options = ((AFUnixDestDriver *) last_driver)->super.sock_options_ptr;
	  }
	  dest_afunix_options			{ $$ = last_driver; }
        | KW_ENDIF {
#endif
}
	;

dest_afunix_options
	: dest_afunix_options dest_afunix_option
	|
	;

dest_afunix_option
	: dest_writer_option
	| dest_afsocket_option
	| socket_option
	| dest_driver_option
	;

dest_afinet_udp_params
	: string
	  {
	    last_driver = *instance = afinet_dd_new(last_addr_family,$1, 514,AFSOCKET_DGRAM);
	    free($1);
      afsocket_dd_set_transport(last_driver,"dgram");
	    last_writer_options = &((AFSocketDestDriver *) last_driver)->writer_options;
	    last_sock_options = ((AFInetDestDriver *) last_driver)->super.sock_options_ptr;
	  }
	  dest_afinet_udp_options		{ $$ = last_driver; }
	;

dest_afinet_udp_options
        : dest_afinet_udp_options dest_afinet_udp_option
	|
	;


dest_afinet_option
	: KW_LOCALIP '(' string ')'		{ afinet_dd_set_localip(last_driver, $3); free($3); }
	| KW_LOCALPORT '(' string_or_number ')'	{ afinet_dd_set_localport(last_driver, $3); free($3); }
	| KW_PORT '(' string_or_number ')'	{ afinet_dd_set_destport(last_driver, $3); free($3); }
	| KW_DESTPORT '(' string_or_number ')'	{ afinet_dd_set_destport(last_driver, $3); free($3); }
	| KW_FAILOVERS '(' string_list ')' 	{ afsocket_dd_add_failovers(last_driver, $3); }
	| inet_socket_option
	| dest_writer_option
	| dest_afsocket_option
	| dest_driver_option
	;

dest_afinet_udp_option
	: dest_afinet_option
	| KW_SPOOF_SOURCE '(' yesno ')'		{ afinet_dd_set_spoof_source(last_driver, $3); }
	| KW_SPOOF_IF '(' string ')'		{ afinet_dd_set_spoof_if(last_driver, $3); free($3); }
	;

dest_afinet_tcp_params
	: string
	  {
	    last_driver = *instance = afinet_dd_new(last_addr_family,$1, 514,AFSOCKET_STREAM);
	    free($1);
      afsocket_dd_set_transport(last_driver,"stream-newline");
	    last_writer_options = &((AFSocketDestDriver *) last_driver)->writer_options;
	    last_sock_options = ((AFInetDestDriver *) last_driver)->super.sock_options_ptr;
	  }
	  dest_afinet_tcp_options		{ $$ = last_driver; }
	;

dest_afinet_tcp_options
	: dest_afinet_tcp_options dest_afinet_tcp_option
	|
	;

dest_afinet_tcp_option
	: dest_afinet_option
	| KW_TLS
	  {
	    last_tls_context = tls_context_new(TM_CLIENT);
	  }
	  '(' tls_options ')'
	  {
	    afsocket_dd_set_tls_context(last_driver, last_tls_context);
          }
	;

dest_afsocket_option
        : KW_KEEP_ALIVE '(' yesno ')'        { afsocket_dd_set_keep_alive(last_driver, $3); }
        ;


dest_afsyslog
        : KW_SYSLOG { last_addr_family = AF_INET; } '(' dest_afsyslog_params ')'   { $$ = $4; }

dest_afsyslog_params
        : string
          {
            last_driver = *instance = afinet_dd_new(last_addr_family, $1, 601, AFSOCKET_STREAM | AFSOCKET_SYSLOG_DRIVER);
            afsocket_dd_set_transport(last_driver,"stream-framed");
	    last_writer_options = &((AFSocketDestDriver *) last_driver)->writer_options;
	    last_sock_options = ((AFInetDestDriver *) last_driver)->super.sock_options_ptr;
	    free($1);
	  }
	  dest_afsyslog_options			{ $$ = last_driver; }
        ;


dest_afsyslog_options
	: dest_afsyslog_options dest_afsyslog_option
	|
	;

dest_afsyslog_option
	: dest_afinet_option
  | KW_IP_PROTOCOL '(' LL_NUMBER ')'         {
                                                  if ($3 != 4 && $3 != 6)
                                                    {
                                                      fprintf(stderr,"ip-protocol option can only be 4 or 6!\n");
                                                      YYERROR;
                                                    }
                                                  else if ($3 == 4)
                                                    {
                                                      ((AFSocketDestDriver *) last_driver)->address_family = AF_INET;
                                                    }
                                                  else
                                                    {
                                                      ((AFSocketDestDriver *) last_driver)->address_family = AF_INET6;
                                                    }
                                                }
  | KW_TRANSPORT '(' transport
          {
            Plugin *p;
            gint context = LL_CONTEXT_CLIENT_PROTO;
            gpointer value;

            p = plugin_find(configuration, context, $3);
            if (p)
              {
                if (p->parser)
                  {
                    value = plugin_parse_config(p, configuration, &@3, &((AFSocketDestDriver *) last_driver)->proto_options);
                  }
                else
                  {
                    value = plugin_construct(p, configuration, context, $3);
                  }
                if (!value)
                  {
                    YYERROR;
                  }
                ((AFSocketDestDriver *) last_driver)->proto_factory = (LogProtoFactory *)value;
              }
            afsocket_dd_set_transport(last_driver, $3);
          } ')'
	| KW_SPOOF_SOURCE '(' yesno ')'		{ afinet_dd_set_spoof_source(last_driver, $3); }
	| KW_SPOOF_IF '(' string ')'		{ afinet_dd_set_spoof_if(last_driver, $3); free($3); }
	| KW_TLS
	  {
	    last_tls_context = tls_context_new(TM_CLIENT);
	  }
	  '(' tls_options ')'
	  {
	    afsocket_dd_set_tls_context(last_driver, last_tls_context);
          }
	;

dest_afsocket_option
  : KW_KEEP_ALIVE '(' yesno ')'        { afsocket_dd_set_keep_alive(last_driver, $3); }
  ;


dest_afnetwork
  : KW_NETWORK '(' dest_afnetwork_params ')'   { $$ = $3; }

dest_afnetwork_params
  : string
    {
      last_driver = *instance = afinet_dd_new(last_addr_family, $1, 601, AFSOCKET_STREAM | AFSOCKET_NETWORK_DRIVER);
      afsocket_dd_set_transport(last_driver,"stream-newline");
      last_writer_options = &((AFSocketDestDriver *) last_driver)->writer_options;
      last_sock_options = ((AFInetDestDriver *) last_driver)->super.sock_options_ptr;
      free($1);
    }
    dest_afsyslog_options     { $$ = last_driver; }
  ;


tls_options
	: tls_option tls_options
	|
	;

tls_option
	: KW_PEER_VERIFY '(' string ')'
	  {
	    last_tls_context->verify_mode = tls_lookup_verify_mode($3);
            free($3);
          }
	| KW_KEY_FILE '(' string ')'
	  {
	    last_tls_context->key_file = g_strdup($3);
            free($3);
          }
	| KW_CERT_FILE '(' string ')'
	  {
	    last_tls_context->cert_file = g_strdup($3);
            free($3);
          }
        | KW_DHPARAM_FILE '(' string ')'
          {
            tls_context_set_dhparam_file(last_tls_context, $3);
            free($3);
          }
	| KW_CA_DIR '(' string ')'
	  {
	    last_tls_context->ca_dir = g_strdup($3);
            free($3);
          }
	| KW_CA_DIR_LAYOUT '(' string ')'
	  {
	    last_tls_context->ca_dir_layout = tls_lookup_ca_dir_layout($3);
            free($3);
          }
	| KW_CRL_DIR '(' string ')'
	  {
	    last_tls_context->crl_dir = g_strdup($3);
            free($3);
          }
        | KW_TRUSTED_KEYS '(' string_list ')'
          {
            tls_session_set_trusted_fingerprints(last_tls_context, $3);
          }
        | KW_TRUSTED_DN '(' string_list ')'
          {
            tls_session_set_trusted_dn(last_tls_context, $3);
          }
	| KW_CIPHER_SUITE '(' string ')'
	  {
            last_tls_context->cipher_suite = g_strdup($3);
            free($3);
	  }
        | KW_CURVE_LIST '(' string ')'
          {
            tls_context_set_curve_list(last_tls_context, $3);
            free($3);
          }
	| KW_ALLOW_COMPRESS '(' yesno ')'
	  {
            last_tls_context->allow_compress = $3;
	  }
	| KW_CERT_SUBJECT '(' string ')'
	  {
	    last_tls_context->cert_subject = g_strdup($3);
	    free($3);
	  }
        ;


socket_option
	: KW_SO_SNDBUF '(' LL_NUMBER ')'
	{
		CHECK_ERROR($3 >= 0 && $3 <= G_MAXINT, @3, "Invalid so_sndbuf, it has to be between 0 and %d", G_MAXINT);
		last_sock_options->so_sndbuf = $3;
	}
	| KW_SO_RCVBUF '(' LL_NUMBER ')'
	{
		CHECK_ERROR($3 >= 0 && $3 <= G_MAXINT, @3, "Invalid so_rcvbuf, it has to be between 0 and %d", G_MAXINT);
		last_sock_options->so_rcvbuf = $3;
	}
	| KW_SO_BROADCAST '(' yesno ')'             { last_sock_options->so_broadcast = $3; }
	| KW_SO_KEEPALIVE '(' yesno ')'             { last_sock_options->so_keepalive = $3; }
	;

inet_socket_option
	: socket_option
	| KW_IP_TTL '(' LL_NUMBER ')'              { ((SocketOptionsInet *) last_sock_options)->ttl = $3; }
	| KW_IP_TOS '(' LL_NUMBER ')'              { ((SocketOptionsInet *) last_sock_options)->tos = $3; }
	;

/* INCLUDE_RULES */

%%
