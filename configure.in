#############################################################################
# Copyright (c) 2016 Balabit
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
# As an additional exemption you are allowed to compile & link against the
# OpenSSL libraries as published by the OpenSSL project. See the file
# COPYING for details.
#
#############################################################################

dnl Process this file with autoconf to produce a configure script.
dnl
dnl There are a couple of environment defined variables which this script
dnl makes use of in addition to the standard CFLAGS/LDFLAGS/etc. These are:
dnl
dnl RELEASE_TAG        - Debian release tag which is put to debian/changelog
dnl SNAPSHOT_VERSION   - snapshot version to add to version number
dnl BINARY_BRANCH      - the value is added to all source/binary packages
dnl SOURCE_REVISION    - Revision of the source-tree, will added to the version string
dnl
AC_INIT(syslog-ng/main.c)
AC_CONFIG_MACRO_DIR([m4])
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])
AC_LIBTOOL_WIN32_DLL

dnl ***************************************************************************
dnl definitions

PACKAGE="syslog-ng-premium-edition"
VERSION="`cat $srcdir/VERSION`"
SSB_VERSION="`cat $srcdir/SSB_VERSION`"

if [[ -z "$SSB_RELEASE" ]]; then
  SSB_RELEASE=0
fi

if test $SSB_RELEASE -eq 1; then
  VERSION="$VERSION$SSB_VERSION"
fi


dnl ***************************************************************************
dnl dependencies

GLIB_MIN_VERSION="2.10.1"
EVTLOG_MIN_VERSION="0.2.12"
OPENSSL_MIN_VERSION="1.0.2"
LIBDBI_MIN_VERSION="0.8.0"
IVYKIS_MIN_VERSION="0.36"
JSON_C_MIN_VERSION="0.7"
JSON_GLIB_MIN_VERSION="0.12"
PCRE_MIN_VERSION="6.1"
LMC_MIN_VERSION="0.1.0"
XML2_MIN_VERSION="2.9.0"
JAVA_MIN_VERSION="1.7"
GRADLE_MIN_VERSION="2.2"
LIBTCMALLOC_MIN_VERSION="0.98"

dnl ***************************************************************************
dnl Initial setup

ostype=`uname -s`

if test -r $srcdir/dist.conf; then
    # read defaults, dist.conf does not change
    # values for parameters that are already set
    . $srcdir/dist.conf
fi

if test -z "$RELEASE_TAG"; then
    RELEASE_TAG=unstable
fi


if test "`uname -s`" = "Linux";then
    CURRDATE=`date -R`
else
    CURRDATE=`date +"%a, %d %b %Y %H:%M:%S %Z"`
fi

AM_INIT_AUTOMAKE($PACKAGE, $VERSION, [no-define subdir-objects])
if test -n "$SNAPSHOT_VERSION"; then
    VERSION=$VERSION+$SNAPSHOT_VERSION
fi
_AM_PROG_TAR([ustar])

IS_WINDOWS=0
IS_I386=0
IS_SOLARIS=0
case "$ostype" in
    *CYGWIN*|*MINGW*)
        IS_WINDOWS=1
        case "$build" in
          i?86-*)
            IS_I386=1
          ;;
        esac
        ;;
    SunOS)
        IS_SOLARIS=1
        ;;
esac

dnl ***************************************************************************
dnl script snippet to generate user friendly version strings according to the
dnl new versioning policy. All needed code are here to allow easy moving
dnl between projects.
if test -z "$RELEASE_TYPE"; then
    RELEASE_TYPE=stable
fi

if test -z "$BROCHURE_VERSION"; then
    _MAJOR=`echo $VERSION | cut -f1 -d'.'`
    _MINOR=`echo $VERSION | cut -f2 -d'.'`
    case "$RELEASE_TYPE" in
        stable) BROCHURE_VERSION="$_MAJOR LTS";;
        feature) BROCHURE_VERSION="$_MAJOR F$_MINOR";;
        *) BROCHURE_VERSION="$VERSION dogfood edition. Please contact your syslog-ng release manager to fix the configure scritpt";;
    esac
fi

if test -z "$COMBINED_VERSION"; then
    COMBINED_VERSION="$BROCHURE_VERSION ($VERSION)"
fi

TECHNICAL_VERSION=$VERSION

AC_DEFINE_UNQUOTED(RELEASE_TYPE, "$RELEASE_TYPE", [type of syslog-ng release. stable or feature])
AC_DEFINE_UNQUOTED(BROCHURE_VERSION, "$BROCHURE_VERSION", [pretty version for users depends on the release type])
AC_DEFINE_UNQUOTED(COMBINED_VERSION, "$COMBINED_VERSION", [normal and brochure version combined])
AC_DEFINE_UNQUOTED(SOURCE_REVISION, "$SOURCE_REVISION", [source revision])
AC_SUBST(RELEASE_TYPE)
AC_SUBST(SNAPSHOT_VERSION)
AC_SUBST(BROCHURE_VERSION)
AC_SUBST(COMBINED_VERSION)
AC_SUBST(TECHNICAL_VERSION)
AC_SUBST(SOURCE_REVISION)
dnl ***************************************************************************

if test "x$prefix" = "xNONE"; then
    prefix=$ac_default_prefix
fi
if test "x$exec_prefix" = "xNONE"; then
    exec_prefix='${prefix}'
fi
pidfiledir='${localstatedir}'
moduledir='${exec_prefix}/lib/syslog-ng'

AM_CONFIG_HEADER(config.h)

dnl ***************************************************************************
dnl Arguments

AC_ARG_WITH(module-dir,
   [  --with-module-dir=path   Use path as the directory to install modules into],
   moduledir=$with_module_dir)

AC_ARG_WITH(module-path,
   [  --with-module-path=path   Use path as the list of ':' separated directories looked up when searching for modules],
   module_path=$with_module_path)

AC_ARG_WITH(timezone-dir,
   [  --with-timezone-dir=path   Use path as the directory to get the timezone files],
   timezonedir=$with_timezone_dir)

AC_ARG_WITH(default-modules,
   [  --with-default-modules="mod1,mod2,mod3"   Use these as the list of automatically loaded modules],
   default_modules=$with_default_modules, default_modules="auto")

AC_ARG_ENABLE(debug,
              [  --enable-debug      Enable debugging code.],, enable_debug="no")

AC_ARG_ENABLE(env-wrapper,
              [  --enable-env-wrapper    Enable wrapper program to set up various environment variables],, enable_env_wrapper=auto)

AC_ARG_ENABLE(indexer,
              [  --enable-indexer   Enable support for indexer (default: no)]
                ,,enable_indexer="no")

AC_ARG_ENABLE(indexer-func-tests,
              [  --enable-indexer-func-tests  Run function tests for indexer (default: no)]
                ,,enable_indexer_func_tests="no")

AC_ARG_ENABLE(copyright-check,
              [  --enable-copyright-check Run copyright checking (default: yes)]
                ,,enable_copyright_check="yes")

AC_ARG_ENABLE(dynamic-linking,
              [  --enable-dynamic-linking        Link everything dynamically.],,enable_dynamic_linking="auto")

AC_ARG_ENABLE(mixed-linking,
              [  --enable-mixed-linking          Link 3rd party libraries statically, system libraries dynamically],,enable_mixed_linking="auto")

AC_ARG_ENABLE(ipv6,
              [  --enable-ipv6           Enable support for IPv6.],,enable_ipv6="auto")

AC_ARG_ENABLE(pcre,
              [  --enable-pcre           Enable support for Perl Compatible Regular Expressions (default: auto)]
              ,,enable_pcre="auto")

AC_ARG_ENABLE(threaded,
              [ --enable-threaded        Enable multithreading  working mode (default: yes)]
              ,,enable_threaded="yes")

AC_ARG_WITH(json,
              [  --with-json=[json-c/json-glib/auto]
                                         Use the JSON implementation specified]
              ,,with_json="auto")

AC_ARG_ENABLE(json,
              [  --enable-json           Enable support for JSON template formatting (default: auto)]
              ,,enable_json="auto")

AC_ARG_ENABLE(java,
              [ --enable-java            Enable support for java plugins (default: auto)]
              ,,enable_java="auto")

if test $IS_WINDOWS -eq 0; then
AC_ARG_WITH(libnet,
   [  --with-libnet=path      use path to libnet-config script],
   ,
   [with_libnet=""])

AC_ARG_WITH(pidfile-dir,
   [  --with-pidfile-dir=path   Use path as the directory for storing pidfiles],
   pidfiledir=$with_pidfile_dir)

AC_ARG_ENABLE(monitor-inotify,
   [  --enable-monitor-inotify    Enable inotify based file monitoring support.],,enable_monitor_inotify="auto")

AC_ARG_WITH(static-modules,
   [  --with-static-modules="mod1,mod2,mod3"   List of module to be built into the binary. Use 'all' link all of them],
   static_modules=$with_static_modules, static_modules="none")

AC_ARG_WITH([systemdsystemunitdir],
   AS_HELP_STRING([--with-systemdsystemunitdir=DIR], [Directory for systemd service files]))

AC_ARG_ENABLE(gprof,
              [  --enable-gprof      Enable gcc profiling.],, enable_gprof="no")

AC_ARG_ENABLE(memtrace,
              [  --enable-memtrace   Enable alternative leak debugging code.])

AC_ARG_WITH(ivykis,
              [  --with-ivykis=[system/internal]
                                         Link against the system supplied or the builting ivykis library.]
              ,,with_ivykis="system")

AC_ARG_ENABLE(tcp-wrapper,
              [  --enable-tcp-wrapper    Enable support for TCP wrappers.],,enable_tcp_wrapper="auto")

AC_ARG_ENABLE(spoof-source,
              [  --enable-spoof-source   Enable support for spoofed source addresses.]
              ,,enable_spoof_source="auto")

AC_ARG_ENABLE(sun-streams,
              [  --enable-sun-streams    Enable support for Solaris /dev/log STREAMS device.]
              ,,enable_sun_streams="auto")

AC_ARG_ENABLE(sql,
          [  --enable-sql            Enable support for SQL destinations. (default: auto)]
          ,,enable_sql="auto")

AC_ARG_ENABLE(pacct,
              [  --enable-pacct          Enable support for reading Process Accounting files (EXPERIMENTAL, Linux only).]
              ,,enable_pacct="no")

AC_ARG_ENABLE(linux-caps,
              [  --enable-linux-caps     Enable support for managing Linux capabilities (default: auto)]
              ,,enable_linux_caps="auto")

AC_ARG_ENABLE(gcov,
              [  --enable-gcov           Enable coverage profiling (default: no)]
              ,,enable_gcov="no")

AC_ARG_ENABLE(mongodb,
          [  --enable-mongodb        Enable mongodb destination (default: auto)]
              ,,enable_mongodb="auto")

AC_ARG_ENABLE(smtp,
              [  --disable-smtp          Disable SMTP support (default: auto)]
              ,,enable_smtp="auto")

AC_ARG_WITH(libesmtp,
             AC_HELP_STRING([--with-libesmtp=DIR],
                            [use libesmtp library from (prefix) directory DIR]),,)

AC_ARG_WITH(libmongo-client,
              [  --with-libmongo-client=[system/internal]
                                         Link against the system supplied or the builting libmongo-client library.]
              ,,with_libmongo_client="system")

AC_ARG_ENABLE(systemd,
              [  --enable-systemd        Enable systemd support (default: auto)]
              ,,enable_systemd="auto")

AC_ARG_WITH(compile-date,
          [  --without-compile-date  Do not include the compile date in the binary]
          ,, wcmp_date="1")
fi

if test "x$wcmp_date" != "xno"; then
  wcmp_date="1"
else
  wcmp_date="0"
fi

patheval()
{
        OLD=$1
        NEW=`eval echo $1`
        while test "x$OLD" != "x$NEW"
        do
                OLD=$NEW
                NEW=`eval echo $OLD`
        done
        echo $OLD
}

dnl ***************************************************************************
dnl Checks for programs.
AC_PROG_CC
AM_PROG_CC_STDC
AC_PROG_CC_C99
if test "x$ac_cv_prog_cc_c99" = "xno"; then
    AC_MSG_ERROR("C99 standard compliant C compiler required. Try GCC 3.x or later.")
fi
AC_PROG_YACC
AM_PROG_LEX
AC_PROG_MAKE_SET
PKG_PROG_PKG_CONFIG
LT_INIT([dlopen disable-static])

dnl ***************************************************************************
dnl Validate yacc

yacc_ok=1
if echo "$YACC" | grep bison > /dev/null; then
    # NOTE: m4 removes [], that's why it needs to be escaped
    bison_version=[`$YACC --version | head -1 | sed -e 's/[^0-9.]*\([0-9.]\+\)$/\1/'`]
    bison_version_major=`echo $bison_version | cut -d. -f1`
    bison_version_minor=`echo $bison_version | cut -d. -f2`
    if test "$bison_version_major" -lt 2 -o "$bison_version_minor" -lt 4; then
        yacc_ok=0
    fi
    if test "$bison_version_major" -gt 2; then
        yacc_ok=1
    fi
else
    yacc_ok=0
fi

if test $yacc_ok = 0; then
    if test -f $srcdir/lib/cfg-grammar.c || test -f lib/cfg-grammar.c; then
        AC_MSG_WARN([No proper bison found, you'll not be able to change lib/cfg-grammar.y])
    else
        AC_MSG_ERROR([syslog-ng requires bison 2.4 or later (traditional yacc is not enough). Your source tree seems to be from git, which doesn't have lib/cfg-grammar.c. Please install bison or use a distribution tarball.])
    fi
fi

dnl ***************************************************************************
dnl Validate flex

if $LEX --version | grep "flex" >/dev/null; then
    lex_ok=1
else
    lex_ok=0
fi

if test $lex_ok = 0 ; then
    if test -f $srcdir/lib/cfg-lex.c || test -f lib/cfg-lex.c; then
        AC_MSG_WARN([No flex found, you'll not be able to change lib/cfg-lex.l])
    else
        AC_MSG_ERROR([syslog-ng requires flex in order to generate its config lexer. Your source tree seems to be from git, which doesn't have lib/cfg-lex.c. Please install flex or use a distribution tarball.])
    fi
fi

dnl ***************************************************************************
dnl Set up CFLAGS

if test "x$ac_compiler_gnu" = "xyes"; then
        CFLAGS="${CFLAGS} -Wall"
        if test "x$enable_debug" = "xyes"; then
                CFLAGS="${ac_cv_env_CFLAGS_value} -Wall -g"
        fi

        if test "x$enable_gprof" = "xyes"; then
                CFLAGS="${CFLAGS} -pg"
        fi
        if test "x$enable_gcov" = "xyes"; then
                CFLAGS="${CFLAGS} -fprofile-arcs -ftest-coverage"
        fi
fi
if test $IS_WINDOWS -eq 0;then
    CFLAGS="${CFLAGS} -pthread"
else
    case "$CFLAGS" in
        *-mthread*);;
        *) CFLAGS="${CFLAGS} -mthreads";;
    esac
fi

AX_CFLAGS_GCC_OPTION(-Wno-pointer-sign, CFLAGS_NOWARN_POINTER_SIGN)

AC_SYS_LARGEFILE

# FIXME: skip tests on unsupported platforms/architectures...
case "$ostype" in
    HP-UX)
        if $CC -v 2>&1 | grep gcc > /dev/null; then
            CFLAGS="${CFLAGS} -U_XOPEN_SOURCE -U_XOPEN_SOURCE_EXTENDED -D_HPUX_SOURCE"
            LDFLAGS="${LDFLAGS} -lcl"
            AC_DEFINE(HAVE_BROKEN_PREAD, 1, [define if your platform has a broken pread/pwrite (e.g. HP-UX)])
            AC_MSG_WARN([NOTE: on HP-UX with gcc, you might need to edit sys/socket.h manually or you'll get compilation errors])
        fi
        ;;
    AIX)
        if test "$ac_cv_sys_large_files" -ne 0; then
            CFLAGS="${CFLAGS} -D_LARGE_FILES=1"
        fi

        # NOTE: The -brtl option to the linker must be set before calling the
        # configure script, as otherwise the generated libtool will behave
        # differently. We need the runtime linker during execution (hence the
        # -brtl) to load external modules. Also, please note that with -brtl the
        # linker behaves similarly to what is expected on other UNIX systems,
        # without it, it refuses to link an .so in if there's no reference from
        # the main program, even if there is a proper -llibname option.
        LDFLAGS="$LDFLAGS -Wl,-brtl"
        MODULE_LDFLAGS="-avoid-version -module"
        ;;
    OSF1)
        CFLAGS="${CFLAGS} -D_XOPEN_SOURCE=500 -D_XOPEN_SOURCE_EXTENDED -D_OSF_SOURCE -D_POSIX_C_SOURCE"
        ;;
    CYGWIN*|MINGW*)
        LDFLAGS="${LDFLAGS} -lws2_32 -lkernel32 -ldnsapi -liphlpapi"
        CFLAGS="${CFLAGS} -D_POSIX -D_POSIX_C_SOURCE -DWINVER=0x0601"
        ;;
esac

if test "$enable_dynamic_linking" = "auto" -a "$enable_mixed_linking" = "auto"; then
    enable_dynamic_linking="yes"
    enable_mixed_linking="no"
fi

linkopts=0
if test "x$enable_dynamic_linking" = "xyes"; then
       linkopts=`expr $linkopts + 1`
fi
if test "x$enable_mixed_linking" = "xyes"; then
       linkopts=`expr $linkopts + 1`
fi

if test "$linkopts" -gt 1; then
       AC_MSG_ERROR([You cannot specify multiple linking options at the same time (--enable-dynamic-linking, --enable-mixed-linking).])
fi

if test "x$enable_dynamic_linking" = "xyes"; then
    enable_dynamic_linking="yes"
    enable_mixed_linking="no"
    linking_mode="dynamic"
elif test "x$enable_mixed_linking" = "xyes"; then
    enable_dynamic_linking="no"
    enable_mixed_linking="yes"
    linking_mode="mixed"
fi

dnl ***************************************************************************
dnl Is the __thread keyword available?
dnl ***************************************************************************

AC_LINK_IFELSE([AC_LANG_PROGRAM(
[[#include <pthread.h>
__thread int a;
]],
[a=0;])],
[ac_cv_have_tls=yes; AC_DEFINE_UNQUOTED(HAVE_THREAD_KEYWORD, 1, "Whether Transport Layer Security is supported by the system")])

dnl ***************************************************************************
dnl How to do static linking?
dnl ***************************************************************************

AC_MSG_CHECKING(how to enable static linking for certain libraries)
ldversion=`ld -V 2>&1 | head -1`
if echo $ldversion | egrep "GNU|Solaris" > /dev/null; then
    LD_START_STATIC="-Wl,-Bstatic"
    LD_END_STATIC="-Wl,-Bdynamic"
    AC_MSG_RESULT(GNU or Solaris)
elif test $ostype = "HP-UX" > /dev/null; then
    LD_START_STATIC="-Wl,-a,archive"
    LD_END_STATIC="-Wl,-a,shared_archive"
    AC_MSG_RESULT(HP-UX)
elif test "$ostype" = "AIX"; then
    LD_START_STATIC="-Wl,-bstatic"
    LD_END_STATIC="-Wl,-bdynamic"
    AC_MSG_RESULT(AIX)
else
    LD_START_STATIC=""
    LD_END_STATIC=""
    AC_MSG_RESULT([no clues, linking everything dynamically, please send appropriate ld arguments to syslog-ng@lists.balabit.hu])
fi

dnl ***************************************************************************
dnl Miscellanneous headers
dnl ***************************************************************************

AC_HEADER_STDC
AC_CHECK_HEADER(dmalloc.h)
AC_CHECK_HEADERS(strings.h getopt.h stropts.h sys/strlog.h door.h sys/capability.h sys/prctl.h glob.h utmp.h utmpx.h)
AC_CHECK_HEADERS(tcpd.h time.h sys/time.h)
AC_CHECK_HEADER(linux/magic.h, AC_DEFINE(HAVE_LINUX_MAGIC_H,1,""), AC_DEFINE(NFS_SUPER_MAGIC, 0x6969, ""))

dnl ***************************************************************************
dnl Header checks
dnl ***************************************************************************

dnl Checks for typedefs, structures, and compiler characteristics.
AC_STRUCT_TM

AC_CACHE_CHECK(for SO_ACCEPTCONN, blb_cv_c_so_acceptconn,
  [AC_EGREP_CPP(SO_ACCEPTCONN,
[
#include <sys/types.h>
#ifdef _WIN32
#include <winsock2.h>
#else
#include <socket.h>
#endif
SO_ACCEPTCONN
],
  blb_cv_c_so_acceptconn=no, blb_cv_c_so_acceptconn=yes)])

if test "x$blb_cv_c_so_acceptconn" = "xyes"; then
        AC_DEFINE(HAVE_SO_ACCEPTCONN, 1, [SO_ACCEPTCONN is present])
fi

AC_CHECK_MEMBER(struct tm.tm_gmtoff,AC_DEFINE(HAVE_STRUCT_TM_TM_GMTOFF,1,[Whether you have tm_gmtoff field in struct tm]),,[
#if TM_IN_SYS_TIME
#include <sys/time.h>
#else
#include <time.h>
#endif])

AC_CHECK_MEMBER(struct sockaddr_storage.ss_family,
                AC_DEFINE(HAVE_STRUCT_SS_FAMILY,1,[Whether you have ss_family in struct sockaddr_storage]),
                ,[
#ifdef _WIN32
#include <winsock2.h>
#else
#include <sys/socket.h>
#endif])

AC_CHECK_MEMBER(struct sockaddr_un.sun_family,
                AC_DEFINE(HAVE_STRUCT_SOCKADDR_UN,1,[Whether you have sockaddr_un]),
                ,[
#ifdef _WIN32
#include <winsock2.h>
#else
#include <sys/socket.h>
#include <sys/un.h>
#endif])

AC_CACHE_CHECK(for I_CONSLOG, blb_cv_c_i_conslog,
  [AC_EGREP_CPP(I_CONSLOG,
[
#include <sys/strlog.h>
I_CONSLOG
],
  blb_cv_c_i_conslog=no, blb_cv_c_i_conslog=yes)])

old_CPPFLAGS=$CPPFLAGS
CPPFLAGS=-D_GNU_SOURCE
AC_CACHE_CHECK(for O_LARGEFILE, blb_cv_c_o_largefile,
  [AC_EGREP_CPP(O_LARGEFILE,
[
#include <fcntl.h>
O_LARGEFILE
],
  blb_cv_c_o_largefile=no, blb_cv_c_o_largefile=yes)])
CPPFLAGS=$old_CPPFLAGS

if test "x$blb_cv_c_o_largefile" = "xyes"; then
        AC_DEFINE(HAVE_O_LARGEFILE, 1, [O_LARGEFILE is present])
fi

AC_CACHE_CHECK(for struct sockaddr_storage, blb_cv_c_struct_sockaddr_storage,
  [AC_EGREP_HEADER([sockaddr_storage], sys/socket.h, blb_cv_c_struct_sockaddr_storage=yes,blb_cv_c_struct_sockaddr_storage=no)])

if test "$blb_cv_c_struct_sockaddr_storage" = "yes"; then
    AC_DEFINE(HAVE_STRUCT_SOCKADDR_STORAGE,[1],[struct sockaddr_storage is present on your system])
fi

AC_CACHE_CHECK(for struct sockaddr_in6, blb_cv_c_struct_sockaddr_in6,
  [AC_EGREP_HEADER([sockaddr_in6], netinet/in.h, blb_cv_c_struct_sockaddr_in6=yes,blb_cv_c_struct_sockaddr_in6=no)])

AC_CACHE_CHECK(for PR_SET_KEEPCAPS, blb_cv_keepcaps,
  [AC_EGREP_CPP(PR_SET_KEEPCAPS,
[
#include <sys/prctl.h>

PR_SET_KEEPCAPS
],
  blb_cv_keepcaps=no,
  blb_cv_keepcaps=yes)])

if test "x$blb_cv_keepcaps" = "xyes"; then
    AC_DEFINE(HAVE_PR_SET_KEEPCAPS, 1, [have PR_SET_KEEPCAPS])
fi


dnl ***************************************************************************
dnl Checks for libraries
old_LIBS=$LIBS
LIBS="$LIBS -L${prefix}/lib"
AC_CHECK_LIB(door, door_create, BASE_LIBS="$BASE_LIBS -ldoor")
AC_CHECK_LIB(socket, socket, BASE_LIBS="$BASE_LIBS -lsocket")
AC_CHECK_LIB(rt, nanosleep, BASE_LIBS="$BASE_LIBS -lrt")
AC_CHECK_LIB(nsl, gethostbyname, BASE_LIBS="$BASE_LIBS -lnsl")
AC_CHECK_LIB(regex, regexec, REGEX_LIBS="-lregex")
AC_CHECK_LIB(resolv, res_init, RESOLV_LIBS="-lresolv")
AC_CHECK_LIB(tcmalloc_minimal, malloc, TCMALLOC_LIBS="$TCMALLOC_LIBS -ltcmalloc_minimal")
LIBS=$old_LIBS


if test "x$enable_linux_caps" = "xyes" -o "x$enable_linux_caps" = "xauto"; then
    AC_CHECK_LIB(cap, cap_set_proc, LIBCAP_LIBS="-lcap")
fi


dnl some of these are provided by libs declared in BASE_LIBS on non-Linux/FreeBSD systems.
old_LIBS=$LIBS
LIBS="$LIBS $BASE_LIBS"
AC_CHECK_FUNCS(strdup strtol strtoll strtoimax inet_aton inet_ntoa getopt_long getaddrinfo getutent getutxent pread pwrite strcasestr memrchr)
AC_CHECK_FUNCS(clock_gettime)

if test $IS_SOLARIS -eq 0; then
  dnl on solaris the get name info returns 0, although it can't resolve hostname
  AC_CHECK_FUNCS(getnameinfo)
fi


LIBS=$old_LIBS
AC_CHECK_TYPE([clockid_t], [AC_DEFINE([HAVE_CLOCKID_T],1, [Define to 1 if you have the clockid_t type.])])

AC_CHECK_FUNCS_ONCE([localtime_r gmtime_r])
if test "$ac_cv_func_localtime_r" != "xyes"; then
	# localtime_r and gmtime_r sometimes declared as a macro in time.h or sys/time.h ...
    AC_CACHE_CHECK([have localtime_r], [blb_cv_have_localtime_r],
    [AC_LINK_IFELSE(
        [AC_LANG_PROGRAM(
            [[#ifdef HAVE_TIME_H
#include <time.h>
#endif
#ifdef HAVE_SYS_TIME_H
#include <sys/time.h>
#endif
            ]],
            [[struct tm habala;
            if( localtime_r(0, &habala)) return 0;]])
            ],
            [blb_cv_have_localtime_r=yes],
            [blb_cv_have_localtime_r=no])
     ])

    if test "x$blb_cv_have_localtime_r" = "xyes"; then
        AC_DEFINE(HAVE_LOCALTIME_R, 1, [localtime_r call present])
        AC_DEFINE(HAVE_GMTIME_R, 1, [gmtime_r call present])
    fi
fi
dnl ***************************************************************************
dnl libevtlog headers/libraries
dnl ***************************************************************************
PKG_CHECK_MODULES(EVTLOG, eventlog >= $EVTLOG_MIN_VERSION,,)

dnl ***************************************************************************
dnl libwrap headers/libraries
dnl ***************************************************************************

old_LIBS=$LIBS
AC_CACHE_CHECK(for TCP wrapper library,
                blb_cv_c_lwrap,

for libwrap in "-lwrap" "/usr/local/lib/libwrap.a"; do
        LIBS="$old_LIBS $libwrap"

        [AC_TRY_LINK(,
        [
}

int allow_severity;
int deny_severity;
extern int hosts_access(void);

int foo(void)
{
        hosts_access();
],
        [blb_cv_c_lwrap=$libwrap
        break],
        blb_cv_c_lwrap="")
done

])
LIBS=$old_LIBS
LIBWRAP_LIBS=$blb_cv_c_lwrap

if test "x$enable_tcp_wrapper" = "xauto"; then
    AC_MSG_CHECKING(whether to enable TCP wrapper support)
    if test "x$ac_cv_header_tcpd_h" = "xyes" -a "x$blb_cv_c_lwrap" != "x"; then
        enable_tcp_wrapper=yes
        AC_MSG_RESULT(yes)
    else
        LIBWRAP_LIBS=""
        AC_MSG_RESULT(no)
        enable_tcp_wrapper=no
    fi
elif test "x$enable_tcp_wrapper" != "xyes"; then
        LIBWRAP_LIBS=""
fi

dnl ***************************************************************************
dnl libdbi headers/libraries
dnl ***************************************************************************

AC_CHECK_LIB(dl, dlsym, DL_LIBS="-ldl")
PKG_CHECK_MODULES(LIBDBI, dbi >= $LIBDBI_MIN_VERSION, libdbi_pkgconfig_not_found="0", libdbi_pkgconfig_not_found="1")

if test "$libdbi_pkgconfig_not_found" -eq 1; then
    dnl if libdbi has no .pc file, try it without one
    AC_CHECK_LIB(dbi, dbi_initialize, LIBDBI_LIBS="-ldbi"; LIBDBI_CFLAGS="-I/usr/include")
fi

if test "x$enable_sql" = "xauto"; then
    AC_MSG_CHECKING(whether to enable SQL support)
    if test "x$LIBDBI_LIBS" != "x"; then
        enable_sql="yes"
        AC_MSG_RESULT(yes)
    else
        enable_sql="no"
        AC_MSG_RESULT(no)
    fi
fi

dnl ***************************************************************************
dnl Linux inotify
dnl ***************************************************************************
if test "x$enable_monitor_inotify" = "xyes" -o "x$enable_monitor_inotify" = "xauto"  ; then
  dnl We need to check if the right inotify version is accessible

  dnl It's hard to find a good test on how to check the correct
  dnl inotify version. They changed the headers a lot.

        AC_CHECK_HEADERS(sys/inotify.h)
        AC_CHECK_HEADERS(inotifytools/inotify.h)

        AC_TRY_COMPILE([
      #include <unistd.h>
      #ifdef HAVE_SYS_INOTIFY_H
      #include <sys/inotify.h>
      #elif HAVE_INOTIFYTOOLS_INOTIFY_H
      #include <inotifytools/inotify.h>
      #endif
    ],
    [ int a = inotify_init(); int b =  IN_MODIFY | IN_MOVED_TO | IN_CREATE; ],
    [inotify_present="yes"],
    [inotify_present="no"]
  )

  if test  "x$enable_monitor_inotify" = "xauto"; then
    enable_monitor_inotify=$inotify_present
  else
    if test "x$inotify_present" = "xno"; then
      AC_MSG_ERROR([Inotify support enabled but inotify header (sys/inotify.h, inotifytools/inotify.h) not found])
    fi
  fi
fi

if test  "x$enable_monitor_inotify" = "xno" ; then
  AC_MSG_NOTICE(Falling back to polling based file monitoring)
fi

dnl ***************************************************************************
dnl GLib headers/libraries
dnl ***************************************************************************

GLIB_ADDONS="gmodule-2.0 gthread-2.0"
PKG_CHECK_MODULES(GLIB, glib-2.0 >= $GLIB_MIN_VERSION $GLIB_ADDONS,,)

if test "$linking_mode" != "dynamic"; then
    # strip out -ldl & -lrt as it cannot be linked statically
    GLIB_LIBS=`echo $GLIB_LIBS | tr ' ' '\n' | egrep -v "^(-ldld?)|(-lrt)$" | tr '\n' ' '`

    old_LIBS=$LIBS
    LIBS="$LD_START_STATIC $GLIB_LIBS $LD_END_STATIC $BASE_LIBS"
    AC_CHECK_FUNC(g_hash_table_new, blb_cv_static_glib=yes, blb_cv_static_glib=no)
    LIBS=$old_LIBS
fi

old_CPPFLAGS=$CPPFLAGS
CPPFLAGS="$GLIB_CFLAGS"
old_LDFLAGS=$LDFLAGS
LDFLAGS="$LDFLAGS $GLIB_LIBS"

AC_CACHE_CHECK(sanity checking Glib headers,
               blb_cv_glib_sane,
[AC_TRY_RUN([
#include <glib.h>

int main()
{
  if (sizeof(long) != GLIB_SIZEOF_LONG)
    return 1;
  return 0;
}
],
blb_cv_glib_sane=yes,
blb_cv_glib_sane=no,
blb_cv_glib_sane=yes)])
CPPFLAGS=$old_CPPFLAGS
LDFLAGS=$old_LDFLAGS

if test "x$blb_cv_glib_sane" = "xno"; then
    AC_MSG_ERROR([Glib headers inconsistent with current compiler setting. You might be using 32 bit Glib with a 64 bit compiler, check PKG_CONFIG_PATH])
fi

if test "x$linking_mode" != "xdynamic" -a "x$blb_cv_static_glib" = "xno"; then
    AC_MSG_ERROR([static GLib libraries not found (a file named libglib-2.0.a), either link GLib dynamically using the --enable-dynamic-linking or install a static GLib])
fi

dnl ***************************************************************************
dnl json headers/libraries
dnl ***************************************************************************
PKG_CHECK_MODULES(JSON_C, json >= $JSON_C_MIN_VERSION,, JSON_C_LIBS="")
PKG_CHECK_MODULES(JSON_GLIB, json-glib-1.0 >= $JSON_GLIB_MIN_VERSION,, JSON_GLIB_LIBS="")

dnl ***************************************************************************
dnl xml2 headers/libraries
dnl ***************************************************************************
PKG_CHECK_MODULES(LIBXML2, libxml-2.0 >= $XML2_MIN_VERSION,,)

dnl ***************************************************************************
dnl pcre headers/libraries
dnl ***************************************************************************

if test "x$enable_pcre" = "xyes" -o "x$enable_pcre" = "xauto"; then
    if test "x$linking_mode" = "xmixed"; then
        # check if we have a pcre bundled in glib. In case glib is
        # dynamic it doesn't matter as glib doesn't export those
        # symbols.  But in case glib is static, linking it through
        # glib and through libpcre would clash.
        old_LIBS="$LIBS"
        LIBS="$LD_START_STATIC $GLIB_LIBS $LD_END_STATIC $LIBS"
        AC_CHECK_FUNC(pcre_compile2, AC_MSG_ERROR([You cannot use a GLib embedded PCRE in mixed linking mode]))
        LIBS="$old_LIBS"
    fi

    PKG_CHECK_MODULES(PCRE, libpcre >= $PCRE_MIN_VERSION,, PCRE_LIBS="")
    if test -z "$PCRE_LIBS"; then
        if test "x$enable_pcre" = "xyes"; then
            AC_MSG_ERROR(Cannot find pcre version >= $PCRE_MIN_VERSION.)
        else
            AC_MSG_WARN(Cannot find pcre version >= $PCRE_MIN_VERSION. pcre support disabled.)
        fi
    fi
fi

if test -z "$PCRE_LIBS"; then
    PCRE_LIBS=""
    PCRE_CFLAGS=""
fi

if test "x$enable_pcre" = "xauto"; then
        AC_MSG_CHECKING(whether to enable PCRE support)
        if test "x$PCRE_LIBS" != "x"; then
                enable_pcre="yes"
        else
                enable_pcre="no"
        fi
        AC_MSG_RESULT([$enable_pcre])
fi

dnl ***************************************************************************
dnl OpenSSL headers/libraries
dnl ***************************************************************************

# openssl is needed for:
#  * TLS support

dnl check OpenSSL static linking
PKG_CHECK_MODULES(OPENSSL, openssl >= $OPENSSL_MIN_VERSION,, OPENSSL_LIBS="")

if test -n "$OPENSSL_LIBS" -a "$linking_mode" != "dynamic"; then
    dnl required for openssl, but only when linking statically
    AC_CHECK_LIB(z, inflate, ZLIB_LIBS="-lz")

    dnl Remove -ldl as it cannot be linked statically on some platforms, it'll be present in DL_LIBS
    OPENSSL_LIBS=`echo $OPENSSL_LIBS | tr ' ' '\n' | egrep -v "^-ldld?$" | tr '\n' ' '`

    old_LIBS=$LIBS
    LIBS="$LD_START_STATIC $OPENSSL_LIBS $ZLIB_LIBS $LD_END_STATIC $DL_LIBS"
    AC_CHECK_FUNC(SSL_library_init, blb_cv_static_openssl=yes, blb_cv_static_openssl=no)

    LIBS=$old_LIBS
fi

if test "x$OPENSSL_LIBS" != "x"; then
        _old_CFLAGS="$CFLAGS"
        CFLAGS="$CFLAGS $OPENSSL_CFLAGS"
        _old_CPPFLAGS="$CPPFLAGS"
        # FIXME: this might backfire with non-GCC cpp's ... - Folti
        CPPFLAGS="$CPPFLAGS $OPENSSL_CFLAGS"
        AC_CHECK_HEADERS(openssl/ts.h)
        CFLAGS="$_old_CFLAGS"
        CPPFLAGS="$_old_CPPFLAGS"
fi

dnl
dnl Right now, openssl is never linked statically as it is only used by the
dnl TLS build of the afsocket plugin which is loaded dynamically anyway.
dnl
dnl The static check remains though, because the core may need openssl in the
dnl future, in which case it becomes relevant again.
dnl

dnl if test "x$linking_mode" != "xdynamic" -a "x$blb_cv_static_openssl" = "xno"; then
dnl AC_MSG_ERROR([static OpenSSL libraries not found (libssl.a, libcrypto.a and their external dependencies like libz.a), either link OpenSSL statically using the --enable-dynamic-linking, or install a static OpenSSL])
dnl fi

dnl ***************************************************************************
dnl libnet headers/libraries
dnl ***************************************************************************
AC_MSG_CHECKING(for LIBNET)
if test "x$with_libnet" = "x"; then
        LIBNET_CONFIG="`which libnet-config`"
else
        LIBNET_CONFIG="$with_libnet/libnet-config"
fi

if test -n "$LIBNET_CONFIG" -a -x "$LIBNET_CONFIG"; then
        LIBNET_CFLAGS="`$LIBNET_CONFIG --defines`"
        LIBNET_LIBS="`$LIBNET_CONFIG --libs`"
        AC_MSG_RESULT(yes)
else
        LIBNET_LIBS=
        AC_MSG_RESULT(no)
fi


if test "x$enable_spoof_source" = "xauto"; then
    AC_MSG_CHECKING(whether to enable spoof source support)
        if test "x$LIBNET_LIBS" != "x"; then
                enable_spoof_source=yes
                AC_MSG_RESULT(yes)
        else
                enable_spoof_source=no
                LIBNET_LIBS=
                LIBNET_CFLAGS=
                AC_MSG_RESULT(no)
        fi
elif test "x$enable_spoof_source" != "xyes"; then
    LIBNET_CFLAGS=""
    LIBNET_LIBS=""
    enable_spoof_source=no
fi

if test "x$enable_spoof_source" = "xyes"; then
    if test $IS_WINDOWS -ne 0; then
        LIBNET_CFLAGS="$LIBNET_CFLAGS -I${prefix}/include/libpcap"
        LIBNET_LIBS="$LIBNET_LIBS -lwpcap"
    fi
fi
dnl ***************************************************************************
dnl ivykis headers/libraries
dnl ***************************************************************************

if test "x$with_ivykis" = "xinternal"; then
    if test -f "$srcdir/lib/ivykis/lib/iv_main.c"; then
        AC_CONFIG_SUBDIRS([lib/ivykis])

        # these can only be used in lib as it assumes
        # the current directory just one below ivykis

        IVYKIS_LIBS="-Wl,--whole-archive -L\$(top_builddir)/lib/ivykis/lib -livykis -L\$(top_builddir)/lib/ivykis/modules -livykis-modules -Wl,--no-whole-archive"
        IVYKIS_CFLAGS="-I\$(top_srcdir)/lib/ivykis/lib/include -I\$(top_builddir)/lib/ivykis/lib/include -I\$(top_srcdir)/lib/ivykis/modules/include"
        IVYKIS_SUBDIRS=ivykis

        # LIBS to use when libtool is not applicable (when linking the main syslog-ng executable in mixed linking mode)
        IVYKIS_NO_LIBTOOL_LIBS="-Wl,--whole-archive -L\$(top_builddir)/lib/ivykis/lib/.libs -livykis -L\$(top_builddir)/lib/ivykis/modules/.libs -livykis-modules -Wl,--no-whole-archive"
    else
        AC_MSG_ERROR([Internal ivykis sources not found in lib/ivykis. This is a hard dependency, unable to build syslog-ng without them.])
    fi
else
    with_ivykis="system"
    PKG_CHECK_MODULES(IVYKIS, ivykis >= $IVYKIS_MIN_VERSION,,)

    # in case we're using a system installed ivykis, we can link against
    # it even without libtool and without extra linker arguments (as
    # we're linking dynamically)

    IVYKIS_NO_LIBTOOL_LIBS="$IVYKIS_LIBS"
    echo "IVYKIS LIBS: $IVYKIS_LIBS"
fi

dnl ***************************************************************************
dnl libmongo headers/libraries
dnl ***************************************************************************

if test "x$with_libmongo_client" = "xinternal"; then
    if test -f "$srcdir/modules/afmongodb/libmongo-client/src/mongo.h"; then
        AC_CONFIG_SUBDIRS([modules/afmongodb/libmongo-client])

        # these can only be used in modules/mongodb as it assumes
        # the current directory just one below libmongo-client

        LIBMONGO_LIBS="-L\$(builddir)/libmongo-client/src -lmongo-client"
        LIBMONGO_CFLAGS="-I\$(srcdir)/libmongo-client/src"
        LIBMONGO_SUBDIRS="libmongo-client"
    else
        AC_MSG_WARN([Internal libmongo-client sources not found in modules/afmongodb/libmongo-client])
        with_libmongo_client="no"
    fi
elif test "x$with_libmongo_client" = "xsystem"; then
    PKG_CHECK_MODULES(LIBMONGO, libmongo-client >= $LMC_MIN_VERSION,,with_libmongo_client="no")
fi

if test "x$with_libmongo_client" = "xno"; then
    enable_mongodb="no"
fi

dnl ***************************************************************************
dnl libesmtp headers/libraries
dnl ***************************************************************************
if test "x$enable_smtp" != "xno" && test "x$with_libesmtp" != "no"; then
  libesmtp="yes"
  if test "x$with_libesmtp" != "yes" && test "x$with_libesmtp" != "x"; then
    CPPFLAGS_SAVE="$CPPFLAGS"
    LDFLAGS_SAVE="$LDFLAGS"
    CPPFLAGS="$CPPFLAGS -I$with_libesmtp/include"
    LDFLAGS="$LDFLAGS -L$with_libesmtp/lib"
    AC_CHECK_HEADER(libesmtp.h, [LIBESMTP_CFLAGS="-I$with_libesmtp/include"
               LIBESMTP_LIBS="-L$with_libesmtp/lib -lesmtp"], [libesmtp=no])
    CPPFLAGS="$CPPFLAGS_SAVE"
    LDFLAGS="$LDFLAGS_SAVE"
  else
    AC_MSG_CHECKING(for libESMTP)
    if libesmtp-config --version >/dev/null 2>&1; then
      AC_MSG_RESULT(yes)
      LIBESMTP_CFLAGS="`libesmtp-config --cflags`"
      LIBESMTP_LIBS="`libesmtp-config --libs`"
    else
      AC_MSG_RESULT(no)
      libesmtp=no
    fi
  fi
  if test "x$enable_smtp" = "xyes" && test "x$libesmtp" = "xno"; then
    AC_MSG_ERROR(libESMTP not found)
  fi
  enable_smtp=$libesmtp
fi

dnl ***************************************************************************
dnl java headers/libraries
dnl ***************************************************************************

if test "x$enable_java" = "xauto" || test "x$enable_java" = "xyes"; then
    if test "x$enable_java" = "xauto"; then
      AC_CHECK_JAVA_VERSION([$JAVA_MIN_VERSION], [enable_java=yes], [enable_java=no])
      AC_CHECK_GRADLE_VERSION([$GRADLE_MIN_VERSION], [enable_java=yes], [enable_java=no])
    else
      AC_CHECK_JAVA_VERSION([$JAVA_MIN_VERSION], [enable_java=yes], [AC_MSG_ERROR([Java not found])])
      AC_CHECK_GRADLE_VERSION([$GRADLE_MIN_VERSION], [enable_java=yes], [AC_MSG_ERROR([Java not found])])
    fi
fi

dnl ***************************************************************************
dnl misc features to be enabled
dnl ***************************************************************************
AC_C_INLINE

if test "x$ac_cv_lib_door_door_create" = "xyes"; then
        AC_CHECK_HEADERS(pthread.h)
        AC_CHECK_LIB(pthread, pthread_create)
fi

AC_MSG_CHECKING(whether to enable Sun STREAMS support)
if test "x$ac_cv_header_stropts_h" = "xyes" -a \
        "x$ac_cv_header_sys_strlog_h" = "xyes" -a \
        "x$enable_sun_streams" != "xno" -a \
        "x$blb_cv_c_i_conslog" != "xno" -o \
        "x$enable_sun_streams" = "xyes"; then
        enable_sun_streams=yes
        AC_MSG_RESULT(yes)
else
        enable_sun_streams=no
        AC_MSG_RESULT(no)
fi

if test "x$enable_ipv6" = "xauto"; then
    AC_MSG_CHECKING(whether to enable IPv6 support)
    if test "x$blb_cv_c_struct_sockaddr_in6" = "xyes"; then
        enable_ipv6=yes
        AC_MSG_RESULT(yes)
    else
        enable_ipv6=no
        AC_MSG_RESULT(no)
    fi
fi


if test "x$enable_linux_caps" = "xauto"; then
    AC_MSG_CHECKING(whether to enable Linux capability support)
    if test "x$ac_cv_header_sys_capability_h" = "xyes"; then
        enable_linux_caps="yes"
    else
        enable_linux_caps="no"
    fi
    AC_MSG_RESULT([$enable_linux_caps])
fi

if test "x$enable_mongodb" = "xauto"; then
    AC_MSG_CHECKING(whether to enable mongodb destination support)
    if test "x$with_mongo_client" != "no"; then
        enable_mongodb="yes"
    else
        enable_mongodb="no"
    fi
    AC_MSG_RESULT([$enable_mongodb])
fi

if test "x$enable_json" != "xno"; then
    if test "x$with_json" != "xjson-glib" -a "x$with_json" != "xjson-c" -a "x$with_json" != "xauto"; then
        # unknown --with-json argument

        AC_MSG_ERROR([Unknown JSON implementation ($with_json) specified, only json-glib, json-c and auto is known])
    elif test \( "x$with_json" = "xauto" -o "x$with_json" = "xjson-c" \) -a -n "$JSON_C_LIBS" ;  then
        # json-c found and user requested json-c or auto

        JSON_LIBS=$JSON_C_LIBS
        JSON_CFLAGS=$JSON_C_CFLAGS
        AC_DEFINE_UNQUOTED(HAVE_JSON_C, 1, [Have json-c])
        with_json="json-c"
    elif test \( "x$with_json" = "xauto" -o "x$with_json" = "xjson-glib" \) -a -n "$JSON_GLIB_LIBS"; then
        # json-glib found and user requested json-glib or auto

        JSON_LIBS=$JSON_GLIB_LIBS
        JSON_CFLAGS=$JSON_GLIB_CFLAGS
        AC_DEFINE_UNQUOTED(HAVE_JSON_GLIB, 1, [Have json-glib])
        with_json="json-glib"

    elif test "x$with_json" = "xauto"; then
        # nothing found, but autodetect was selected

        JSON_LIBS=""
        JSON_CFLAGS=""
        with_json="no"
    elif test "x$with_json" = "xjson-glib"; then
        AC_MSG_ERROR([Cannot find json-glib-1.0 >= $JSON_GLIB_MIN_VERSION: is pkg-config in path?])
    elif test "x$with_json" = "xjson-c"; then
        AC_MSG_ERROR([Cannot find json-c version >= $JSON_C_MIN_VERSION: is pkg-config in path?])
    fi

    if test "x$enable_json" = "xauto"; then
        if test "x$with_json" = "xno"; then
            enable_json="no"
        else
            enable_json="yes"
        fi
    elif test "x$enable_json" = "xyes" -a "x$with_json" = "xno"; then
        AC_MSG_ERROR([Cannot find json-c version >= $JSON_C_MIN_VERSION or json-glib-1.0 >= $JSON_GLIB_MIN_VERSION: is pkg-config in path?])
    fi
fi

if test "x$enable_systemd" = "xauto"; then
    if test "$ostype" = "Linux" -a "$blb_cv_c_so_acceptconn" = "yes"; then
        enable_systemd=yes
    else
        enable_systemd=no
    fi

fi

if test "x$enable_systemd" = "xyes"; then
    PKG_CHECK_MODULES(SYSTEMD, libsystemd-daemon >= 31,with_libsystemd="yes",with_libsystemd="no")
    if test "x$with_systemdsystemunitdir" = "xyes"; then
        # no arguments, just --with-systemdsystemunitdir
        systemdsystemunitdir=`$PKG_CONFIG --variable=systemdsystemunitdir systemd`
        if test "$systemdsystemunitdir" = ""; then
            AC_MSG_ERROR([Error autodetecting systemdsystemunitdir, systemd pkg-config file not found?])
        fi
    elif test "$systemdsystemunitdir" = "no"; then
        # --without-systemdsystemunitdir was specified
        systemdsystemunitdir=""
    else
        systemdsystemunitdir="$with_systemdsystemunitdir"
    fi
fi

dnl ***************************************************************************
dnl default modules to be loaded
dnl ***************************************************************************

### The default set of modules are those that provide functionality that
### were provided in syslog-ng 3.2 and prior, unless explicitly overridden
### by the user.
###
### New plugins can be loaded by explicit "@module foo" lines in the
### configuration file, that's the preferred form.

if test "x$default_modules" = "xauto"; then
    default_modules="affile,afprog,afsmtp,afsocket,afuser,basicfuncs,csvparser,dbparser,syslogformat,aflogstore,disk-buffer,confighash,convertfuncs,basic-proto,rltp-proto,license-plugin,json-plugin,cryptofuncs,kvformat"
    if test $IS_WINDOWS -ne 0; then
        default_modules="affile,afsocket,basicfuncs,csvparser,dbparser,syslogformat,aflogstore,disk-buffer,confighash,convertfuncs,basic-proto,rltp-proto,license-plugin,eventlog,json-plugin,cryptofuncs,kvformat"
    fi
    if test "x$enable_mongodb" = "xyes"; then
        default_modules="$default_modules,afmongodb"
    fi
    if test "x$enable_sql" = "xyes"; then
        default_modules="$default_modules,afsql,afsqlsource"
    fi
    if test "x$enable_sun_streams" = "xyes"; then
        default_modules="$default_modules,afstreams"
    fi
    if test "x$enable_indexer" = "xyes"; then
        default_modules="$default_modules,indexed_logstore"
    fi
fi

if test "x$module_path" = "x"; then
    module_path="$moduledir"
fi

CPPFLAGS="$CPPFLAGS $GLIB_CFLAGS $EVTLOG_CFLAGS $PCRE_CFLAGS $OPENSSL_CFLAGS $LIBNET_CFLAGS $LIBDBI_CFLAGS $IVYKIS_CFLAGS $LIBXML2_CFLAGS -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

########################################################
## NOTES: on how syslog-ng is linked
#
# There are two major linking modes currently:
#   1) dynamic: all libraries are linked dynamically, and assumed to be available as dynamic libraries
#
#   2) mixed: typical system provided libraries are linked dynamicaly, the
#      rest is linked statically (Glib etc).  Please note that _only_ the
#      main syslog-ng executable is linked this way so that it can be
#      started early during startup, tools and unit tests are linked
#      dynamically the same way.
#
# The following variables are introduced and AC_SUBSTed to be used in Makefiles:
#
# SYSLOGNG_DEPS_LIBS:
#       includes all dependendent libraries used by binary that can be linked in mixed mode (e.g. only the syslog-ng binary).
#
# TOOL_DEPS_LIBS:
#       executables (e.g. tools & unit test programs) that link against
#       libsyslog-ng.so should be linked with this set of libraries.  other
#       tools that do not use libsyslog-ng.so can use the _LIBS variables
#       directly.
#
# CORE_DEPS_LIBS:
#   libsyslog-ng.so is linked with this set of libraries.
#
# MODULE_DEPS_LIBS:
#       The set of libraries that modules should be linked against. Only to
#       satisfy their "core" dependency, any other libs that the core doesn't
#       depend on must be linked explicitly.
#
# MODULE_LDFLAGS:
#       The LDFLAGS to be passed when linking modules (may not contain
#       library references -l and such, only linker flags)
#
# Modules should be linked against libsyslog-ng.la and libraries that are
# _NOT_ linked into libsyslog-ng.la no need to define a LIBS variable for
# that.


if test -z "$MODULE_LDFLAGS"; then
    MODULE_LDFLAGS="-avoid-version -module -no-undefined"
fi
STATIC_MODULE_LDFLAGS="${STATIC_MODULE_LDFLAGS:=-avoid-version -module -no-undefined -static}"
MODULE_DEPS_LIBS="\$(top_builddir)/lib/libsyslog-ng.la"

if test "x$linking_mode" = "xdynamic"; then
    SYSLOGNG_DEPS_LIBS="$LIBS $BASE_LIBS $GLIB_LIBS $EVTLOG_LIBS $RESOLV_LIBS $LIBCAP_LIBS $PCRE_LIBS $REGEX_LIBS $DL_LIBS $LIBXML2_LIBS $TCMALLOC_LIBS"

    if test "x$with_ivykis" = "xinternal"; then
        # when using the internal ivykis, we're linking it statically into libsyslog-ng.so

        TOOL_DEPS_LIBS="$SYSLOGNG_DEPS_LIBS"
        CORE_DEPS_LIBS="$SYSLOGNG_DEPS_LIBS $IVYKIS_LIBS"
    else
        # otherwise everything needs to link against libivykis.so

        SYSLOGNG_DEPS_LIBS="$SYSLOGNG_DEPS_LIBS $IVYKIS_LIBS"
        echo "SYSLOGNG_DEPS_LIBS = $SYSLOGNG_DEPS_LIBS"

        TOOL_DEPS_LIBS="$SYSLOGNG_DEPS_LIBS"
        CORE_DEPS_LIBS="$SYSLOGNG_DEPS_LIBS"
    fi

    # syslog-ng binary is linked with the default link command (e.g. libtool)
    SYSLOGNG_LINK='$(LINK)'
else
    SYSLOGNG_DEPS_LIBS="$LIBS $BASE_LIBS $RESOLV_LIBS $LD_START_STATIC -Wl,--whole-archive $GLIB_LIBS $EVTLOG_LIBS $PCRE_LIBS $REGEX_LIBS -Wl,--no-whole-archive $IVYKIS_NO_LIBTOOL_LIBS $LD_END_STATIC $LIBCAP_LIBS $DL_LIBS $TCMALLOC_LIBS "
    TOOL_DEPS_LIBS="$LIBS $BASE_LIBS $GLIB_LIBS $EVTLOG_LIBS $RESOLV_LIBS $LIBCAP_LIBS $PCRE_LIBS $REGEX_LIBS $IVYKIS_LIBS $DL_LIBS $TCMALLOC_LIBS"
    CORE_DEPS_LIBS=""

    # bypass libtool in case we want to do mixed linking because it
    # doesn't support -Wl,-Bstatic -Wl,-Bdynamic on a per-library basis.
    SYSLOGNG_LINK='$(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@'
fi
YFLAGS="-d -Wno-yacc -Wno-other"

if test $IS_WINDOWS -ne 0; then
    MODULE_LDFLAGS="$MODULE_LDFLAGS $LDFLAGS"
    MODULE_DEPS_LIBS="$MODULE_DEPS_LIBS $SYSLOGNG_DEPS_LIBS $LDFLAGS"
fi

enable_value()
{
        if test "x$1" = "xyes" ; then
                echo 1
        else
                echo 0
        fi
}

########################################################
# TESTS for PE
########################################################

AC_CHECK_FUNCS(mremap futimes)

if test "x$OPENSSL_LIBS" = "x"; then
    AC_MSG_ERROR([OpenSSL libraries required to build Premium Edition modules.])
fi

old_LIBS=$LIBS
LIBS="$LIBS -L${prefix}/lib"
AC_CHECK_LIB(z, inflate, ZLIB_LIBS="-lz")
LIBS=$old_LIBS

SYSLOG_NG_INCLUDE="-I\$(top_srcdir)/lib -I\$(top_builddir)/lib"
SYSLOG_NG_LIBS="-L\$(top_srcdir)/lib -L\$(top_builddir)/lib -lsyslog-ng \$(SYSLOGNG_DEPS_LIBS)"
case $ostype in
    HP-UX)
        SYSLOG_NG_LIBS="-L\$(top_srcdir)/lib/.libs -L\$(top_builddir)/lib/.libs $SYSLOG_NG_LIBS"
    ;;
esac

CPPFLAGS="$SYSLOG_NG_INCLUDE $CPPFLAGS"
syslog_ng_tools="\$(top_srcdir)/lib"

AM_CONDITIONAL(ENABLE_EMBEDDED_PE_MODULES,true)
AC_SUBST(SYSLOG_NG_INCLUDE)
AC_SUBST(SYSLOG_NG_LIBS)
AC_SUBST(syslog_ng_tools)
AC_DEFINE_UNQUOTED(ENABLE_INDEXER, `enable_value $enable_indexer`, [Enable indexer support])
AC_DEFINE_UNQUOTED(ENABLE_INDEXER_FUNC_TESTS, `enable_value $enable_indexer_func_tests`, [Enable indexer functionality tests])
AC_DEFINE_UNQUOTED(ENABLE_COPYRIGHT_CHECK, `enable_value $enable_copyright_check`, [Enable copyright checking])
AM_CONDITIONAL([ENABLE_INDEXER], [test "$enable_indexer" = "yes"])
AM_CONDITIONAL([ENABLE_INDEXER_FUNC_TESTS], [test "$enable_indexer_func_tests" = "yes"])
AM_CONDITIONAL([ENABLE_COPYRIGHT_CHECK], [test "$enable_copyright_check" = "yes"])

########################################################
# TESTS for PE End
########################################################

if test "x$static_modules" != "none"; then
    case $static_modules in
        all)
            _static_modules=`ls -1 modules`
            if test "x$enable_sql" != "xyes"; then
                _static_modules=`echo $_static_modules | tr ' ' '\n' | grep -v '^afsql'`
            fi
            if test "x$enable_sun_streams" != "xyes"; then
                _static_modules=`echo $_static_modules | tr ' ' '\n' | grep -v '^afstreams$'`
            fi
            if test "x$enable_mongodb" != "xyes"; then
                _static_modules=`echo $_static_modules | tr ' ' '\n' | grep -v '^afmongodb$'`
            fi

            static_modules=`echo $static_modules | tr ' ' ','`
        ;;
        auto) static_modules=$default_modules;;
    esac
fi

SLNG_WIN_VERSION="`echo $VERSION | sed -e 's/[[a-zA-Z+\-~]]\+.*//' -e 's/\./,/g'`"

if test $IS_WINDOWS -ne 0; then
  WINDRES="${ac_cv_build}-windres.exe"
  WINDMC="${ac_cv_build}-windmc.exe"

  AC_SUBST(WINDRES)
  AC_SUBST(WINDMC)
fi

# stripped down version to attach to libsyslogng.so
LIBSYSLOGNG_VERSION="`echo $VERSION | sed -e 's/[[a-zA-Z+\-~]]\+.*//' | cut -f1-3 -d'.'`"

AC_DEFINE_UNQUOTED(PACKAGE, "$PACKAGE", [package name])
AC_DEFINE_UNQUOTED(VERSION, "$VERSION", [version number])
AC_DEFINE_UNQUOTED(SOURCE_REVISION, "$SOURCE_REVISION", [source revision])
AC_DEFINE_UNQUOTED(LICENSE_VERSION, "$LICENSE_VERSION", [Required license version])

AC_DEFINE_UNQUOTED(PATH_PREFIX, "`patheval $prefix`", [prefix directory expanded])
AC_DEFINE_UNQUOTED(PATH_EXECPREFIX, "$exec_prefix", [execprefix directory])

AC_DEFINE_UNQUOTED(PATH_SYSCONFDIR, "$sysconfdir", [sysconfdir])
AC_DEFINE_UNQUOTED(PATH_LOCALSTATEDIR, "$localstatedir", [local state directory])
AC_DEFINE_UNQUOTED(PATH_PIDFILEDIR, "$pidfiledir", [local state directory])
AC_DEFINE_UNQUOTED(PATH_DATAROOTDIR, "$datarootdir", [data root directory])
AC_DEFINE_UNQUOTED(PATH_DATADIR, "$datadir", [data directory])
AC_DEFINE_UNQUOTED(PATH_LIBEXECDIR, "$libexecdir", [libexec directory])

if test -n "$timezonedir"; then
    AC_DEFINE_UNQUOTED(PATH_TIMEZONEDIR, "$timezonedir", [timezone base directory])
fi

AC_DEFINE_UNQUOTED(ENABLE_MONITOR_INOTIFY, `enable_value $enable_monitor_inotify`, [Enable inotify support])
AC_DEFINE_UNQUOTED(MODULE_PATH, "$module_path", [module search path])
AC_DEFINE_UNQUOTED(DEFAULT_MODULES, "$default_modules", [The default set of modules loaded if an old config version is used or autoload-compiled-modules is 1])
AC_DEFINE_UNQUOTED(STATIC_MODULES, "$static_modules", [Builtin modules])
AC_DEFINE_UNQUOTED(ENABLE_STATIC_MODULES, `enable_value $enable_static_modules`, [Enable static modules])

AC_DEFINE_UNQUOTED(WITH_COMPILE_DATE, $wcmp_date, [Include the compile date in the binary])
AC_DEFINE_UNQUOTED(ENABLE_DEBUG, `enable_value $enable_debug`, [Enable debugging])
AC_DEFINE_UNQUOTED(ENABLE_GPROF, `enable_value $enable_gprof`, [Enable gcc profiling])
AC_DEFINE_UNQUOTED(ENABLE_MEMTRACE, `enable_value $enable_memtrace`, [Enable memtrace])
AC_DEFINE_UNQUOTED(ENABLE_SPOOF_SOURCE, `enable_value $enable_spoof_source`, [Enable spoof source support])
AC_DEFINE_UNQUOTED(ENABLE_IPV6, `enable_value $enable_ipv6`, [Enable IPv6 support])
AC_DEFINE_UNQUOTED(ENABLE_TCP_WRAPPER, `enable_value $enable_tcp_wrapper`, [Enable TCP wrapper support])
AC_DEFINE_UNQUOTED(ENABLE_LINUX_CAPS, `enable_value $enable_linux_caps`, [Enable Linux capability management support])
AC_DEFINE_UNQUOTED(ENABLE_PCRE, `enable_value $enable_pcre`, [Enable PCRE support])
AC_DEFINE_UNQUOTED(ENABLE_ENV_WRAPPER, `enable_value $enable_env_wrapper`, [Enable environment wrapper support])
AC_DEFINE_UNQUOTED(ENABLE_SYSTEMD, `enable_value $enable_systemd`, [Enable systemd support])
AC_DEFINE_UNQUOTED(ENABLE_THREADED, `enable_value $enable_threaded`, [Enable multithreaded support])

AM_CONDITIONAL(ENABLE_STATIC_MODULES, [test "$enable_static_modules" = "yes"], [Enable static modules])
AM_CONDITIONAL(ENABLE_ENV_WRAPPER, [test "$enable_env_wrapper" = "yes"])
AM_CONDITIONAL(ENABLE_SYSTEMD, [test "$enable_systemd" = "yes"])
AM_CONDITIONAL(ENABLE_SYSTEMD_UNIT_INSTALL, [test "$systemdsystemunitdir" != ""])
AM_CONDITIONAL(ENABLE_SQL, [test "$enable_sql" = "yes"])
AM_CONDITIONAL(ENABLE_SUN_STREAMS, [test "$enable_sun_streams" = "yes"])
AM_CONDITIONAL(ENABLE_PACCT, [test "$enable_pacct" = "yes"])
AM_CONDITIONAL(ENABLE_MONGODB, [test "$enable_mongodb" = "yes"])
AM_CONDITIONAL(ENABLE_SMTP, [test "$enable_smtp" = "yes"])
AM_CONDITIONAL(IS_AIX, [test "$ostype" = "AIX"])
AM_CONDITIONAL(IS_HPUX, [test "$ostype" = "HP-UX"])
AM_CONDITIONAL(IS_TRU64, [test "$ostype" = "OSF1"])
AM_CONDITIONAL(IS_FBSD61, [test "$ZBS_DIST" = "freebsd-6.1"])
AM_CONDITIONAL(ENABLE_JSON, [test "$enable_json" = "yes"])
AM_CONDITIONAL(ENABLE_THREADED, [test "$enable_threaded" = "yes"])
AM_CONDITIONAL(WITH_LIBSYSTEMD, [test "$with_libsystemd" = "yes"])
AM_CONDITIONAL([ENABLE_INDEXER], [test "$enable_indexer" = "yes"])
AM_CONDITIONAL([IS_WINDOWS], [test $IS_WINDOWS -eq 1])
AM_CONDITIONAL([IS_I386], [test $IS_I386 -eq 1])
AM_CONDITIONAL([ENABLE_JAVA], [test "$enable_java" = "yes"])

# substitution into manual pages
expanded_sysconfdir=[`patheval $sysconfdir | sed -e 's/-/\\\\-/g'`]
expanded_moduledir=[`patheval $moduledir`]

AC_SUBST(timezonedir)
AC_SUBST(pidfiledir)
AC_SUBST(moduledir)
AC_SUBST(expanded_sysconfdir)
AC_SUBST(expanded_moduledir)
AC_SUBST(systemdsystemunitdir)
AC_SUBST(SYSLOGNG_LINK)
AC_SUBST(SYSLOGNG_DEPS_LIBS)
AC_SUBST(TOOL_DEPS_LIBS)
AC_SUBST(CORE_DEPS_LIBS)
AC_SUBST(MODULE_DEPS_LIBS)
AC_SUBST(MODULE_LDFLAGS)
AC_SUBST(STATIC_MODULE_LDFLAGS)
AC_SUBST(BASE_LIBS)
AC_SUBST(YFLAGS)
AC_SUBST(LIBNET_LIBS)
AC_SUBST(LIBNET_CFLAGS)
AC_SUBST(LIBWRAP_LIBS)
AC_SUBST(LIBWRAP_CFLAGS)
AC_SUBST(ZLIB_LIBS)
AC_SUBST(ZLIB_CFLAGS)
AC_SUBST(LIBDBI_LIBS)
AC_SUBST(LIBDBI_CFLAGS)
AC_SUBST(LIBMONGO_LIBS)
AC_SUBST(LIBMONGO_CFLAGS)
AC_SUBST(LIBMONGO_SUBDIRS)
AC_SUBST(LIBESMTP_CFLAGS)
AC_SUBST(LIBESMTP_LIBS)
AC_SUBST(JSON_LIBS)
AC_SUBST(JSON_CFLAGS)
AC_SUBST(IVYKIS_SUBDIRS)
AC_SUBST(RESOLV_LIBS)
AC_SUBST(CFLAGS_NOWARN_POINTER_SIGN)
AC_SUBST(CURRDATE)
AC_SUBST(RELEASE_TAG)
AC_SUBST(PATH_LOCALSTATEDIR)
AC_SUBST(SLNG_WIN_VERSION)
AC_SUBST(LIBSYSLOGNG_VERSION)

AC_SUBST(SYSLOGNG_STATIC_MODULES)


# setting the platform's default shared library extension to make the proper symlink to libafsocket-[no]tls.$(BB_SHREXT)
BB_SHREXT='.so'
case $ostype in
    AIX) BB_SHREXT=".a";;
    HP-UX) case $host_cpu in
        hppa*) BB_SHREXT='.sl';;
        esac
        ;;
    *CYGWIN*|*MINGW*|*cygwin*|*mingw*)
        BB_SHREXT=".dll"
        ;;
esac
AC_SUBST(BB_SHREXT)
AC_SUBST(TCMALLOC_LIBS)

AC_OUTPUT(dist.conf
          Makefile
          syslog-ng.spec
          syslog-ng.pc
          build/Makefile
          lib/Makefile
          lib/tests/Makefile
	        libtest/Makefile
          syslog-ng/Makefile
          syslog-ng-ctl/Makefile
          syslog-ng-query/Makefile
          persist-tool/Makefile
          tools/Makefile
          modules/Makefile
          modules/dummy/Makefile
          modules/indexed_logstore/Makefile
          modules/indexed_logstore/tests/Makefile
          modules/logstore-common/Makefile
          modules/basic-proto/Makefile
          modules/afsocket/Makefile
          modules/afsql/Makefile
          modules/afstreams/Makefile
          modules/affile/Makefile
          modules/afprog/Makefile
          modules/afuser/Makefile
          modules/afmongodb/Makefile
          modules/afsmtp/Makefile
          modules/dbparser/Makefile
          modules/dbparser/tests/Makefile
          modules/csvparser/Makefile
          modules/csvparser/tests/Makefile
          modules/confgen/Makefile
          modules/syslogformat/Makefile
          modules/pacctformat/Makefile
          modules/basicfuncs/Makefile
          modules/basicfuncs/tests/Makefile
          modules/cryptofuncs/Makefile
          modules/cryptofuncs/tests/Makefile
          modules/convertfuncs/Makefile
          modules/convertfuncs/tests/Makefile
          modules/json/Makefile
          modules/json/tests/Makefile
          modules/kvformat/Makefile
          modules/kvformat/tests/Makefile
          modules/agent-config/Makefile
          modules/agent-config/tests/Makefile
          modules/agent-config/tests/unit/Makefile
          modules/agent-config/tests/func/Makefile
          modules/eventlog/Makefile
          modules/eventlog/tests/Makefile
          modules/systemd-journal/Makefile
          modules/systemd-journal/tests/Makefile
          modules/java/Makefile
          modules/java-modules/Makefile
          modules/cef/Makefile
          modules/cef/tests/Makefile

dnl PE modules
	modules/license/Makefile
	modules/license/zorp/license/libzlicenseconfig.h
	modules/logstore/Makefile
        modules/logstore/tests/Makefile
	modules/diskq/Makefile
	modules/diskq/tests/Makefile
	modules/confighash/Makefile
	modules/snmp/Makefile
	modules/afsqlsource/Makefile
	modules/afsqlsource/tests/Makefile
	modules/rltp-proto/Makefile
	modules/rltp-proto/tests/Makefile
	modules/windows-resource/Makefile
	pe-tests/Makefile
	pe-tests/unit/Makefile
	pe-tests/tools/Makefile
	pe-tests/functional/Makefile
	windows-binaries/Makefile
	windows-tools/Makefile
	windows-tools/upgrade-tool/Makefile
	windows-tools/upgrade-tool/tests/Makefile
dnl PE modules


      scripts/Makefile
      scripts/update-patterndb
      doc/Makefile
      doc/man/syslog-ng-ctl.1
      doc/man/syslog-ng.conf.5
      doc/man/syslog-debun.1
      doc/man/pdbtool.1
      doc/man/syslog-ng.8
      doc/man/syslog-ng-query.1
      doc/man/persist-tool.1
      doc/man/dqtool.1
      doc/man/loggen.1
      doc/man/lgstool.1
      contrib/Makefile
      scl/Makefile
      tests/Makefile
      debian/Makefile
      tgz2build/Makefile
      tests/unit/Makefile
      tests/unit/filters-in-list/Makefile
      tests/complex/Makefile
      tests/copyright/Makefile
      tests/loggen/Makefile
      winbuild/Makefile
          )

echo
echo "syslog-ng Open Source Edition $VERSION configured"
echo " Edition settings:"
echo "  Release type                : $RELEASE_TYPE"
echo "  Pretty version             : $BROCHURE_VERSION"
echo "  Combined vers.              : $COMBINED_VERSION"
echo " Compiler options:"
echo "  compiler                    : $CC"
echo "  compiler options            : $CFLAGS $CPPFLAGS"
echo "  linker flags                : $LDFLAGS $LIBS"
echo "  prefix                      : $prefix"
echo "  linking mode                : $linking_mode"
echo "  __thread keyword            : ${ac_cv_have_tls:=no}"
echo " Submodules:"
echo "  ivykis                      : $with_ivykis"
echo "  libmongo-client             : $with_libmongo_client"
echo " Features:"
echo "  Debug symbols               : ${enable_debug:=no}"
echo "  GCC profiling               : ${enable_gprof:=no}"
echo "  Memtrace                    : ${enable_memtrace:=no}"
echo "  IPV6 support                : ${enable_ipv6:=no}"
echo "  spoof-source support        : ${enable_spoof_source:=no}"
echo "  tcp-wrapper support         : ${enable_tcp_wrapper:=no}"
echo "  Linux capability support    : ${enable_linux_caps:=no}"
echo "  PCRE support                : ${enable_pcre:=no}"
echo "  Env wrapper support         : ${enable_env_wrapper:=no}"
echo "  Monitor-Inotify support     : ${enable_monitor_inotify:=no}"
echo "  systemd support             : ${enable_systemd:=no} (unit dir: ${systemdsystemunitdir:=none})"
echo "  MultiThread support         : ${enable_threaded:=no}"
echo " Modules:"
echo "  Module search path          : ${module_path}"
echo "  Default module list         : ${default_modules}"
echo "  Builtin modules             : ${static_modules}"
echo "  Sun STREAMS support (module): ${enable_sun_streams:=no}"
echo "  SQL support (module)        : ${enable_sql:=no}"
echo "  PACCT module (EXPERIMENTAL) : ${enable_pacct:=no}"
echo "  MongoDB destination (module): ${enable_mongodb:=no}"
echo "  Indexer                     : ${enable_indexer:=no}"
echo " Shared Library extension     : $BB_SHREXT"
echo "  JSON support (module)       : ${enable_json:=no} (using ${with_json})"
echo "  SMTP support (module)       : ${enable_smtp:=no}"
echo "  JAVA support (module)       : ${enable_java:=no}"
echo "CORE_DEPSLIBS                 : $CORE_DEPS_LIBS"

#vim: sw=4 ts=4 expandtab
